name: release

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag for the release (e.g., 1.0.0)'
        required: true
  push:
    branches:
      - main

permissions:
  attestations: write
  contents: write
  id-token: write
  pull-requests: write
  packages: write

jobs:
  # Create Release PR - only on workflow_dispatch
  prepare-release:
    runs-on: "${{ github.repository_owner == 'erpc' && 'blacksmith-8vcpu-ubuntu-2404' || 'ubuntu-24.04' }}"
    if: github.event_name == 'workflow_dispatch'
    outputs:
      version: ${{ github.event.inputs.version_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'

      - name: Generate types
        run: |
          go install github.com/gzuidhof/tygo@latest
          tygo generate

      # Run goreleaser in snapshot mode to generate checksums
      - name: Run GoReleaser Snapshot
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --snapshot --clean
        env:
          GORELEASER_CURRENT_TAG: ${{ github.event.inputs.version_tag }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Setup pnpm + node and install dependencies
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'

      - name: Install dependencies without postinstall hooks
        run: pnpm install --ignore-scripts
        env:
          CI: true

      - name: Try building npm package
        run: pnpm run build

      # Update version in package.json files
      - name: Update package versions
        run: |
          for pkg in . typescript/cli typescript/config; do
            cd $pkg
            npm version ${{ github.event.inputs.version_tag }} --no-git-tag-version
            cd -
          done

      # Generate the release files using the snapshot checksums
      - name: Generate CLI release files
        working-directory: typescript/cli
        run: |
          export VERSION="${{ github.event.inputs.version_tag }}"
          export COMMIT_SHA=${{ github.sha }}
          export CHECKSUMS_FILE=../../dist/checksums.txt
          pnpm run build
          npx ts-node ./src/script/generate-release-files.ts

      - name: Cleanup generated files 
        run: |
          rm -rf dist/

      # Create PR with all changes
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          commit-message: "chore: release ${{ github.event.inputs.version_tag }}"
          title: "chore: release ${{ github.event.inputs.version_tag }}"
          body: |
            ðŸš€ Release preparation for version ${{ github.event.inputs.version_tag }}
            
            This PR includes:
            - Version bumps in package.json files
            - Generated TypeScript types
            - Generated release files
            - Generated checksums
          branch: "release/${{ github.event.inputs.version_tag }}"
          base: main
          labels: release

  # Run on release PR merge
  release:
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main' && 
      contains(github.event.head_commit.message, 'chore: release')
    runs-on: "${{ github.repository_owner == 'erpc' && 'blacksmith-8vcpu-ubuntu-2404' || 'ubuntu-24.04' }}"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Syft
        uses: anchore/sbom-action/download-syft@aa0e114b2e19480f157109b9922bda359bd98b90 # v0.20.8

      # Extract version from commit message
      - name: Extract version
        id: version
        run: |
          VERSION=$(echo "${{ github.event.head_commit.message }}" | grep -oP 'release \K([0-9]+\.[0-9]+\.[0-9]+)')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'

      - name: Configure Git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      # Create git tag
      - name: Create tag
        run: |
          git tag ${{ steps.version.outputs.VERSION }} -f
          git push origin ${{ steps.version.outputs.VERSION }} -f

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Attest build provenance
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-checksums: ./dist/checksums.txt

      # Setup pnpm + node and install dependencies
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'

      - name: Install dependencies without postinstall hooks
        run: pnpm install --ignore-scripts
        env:
          CI: true

      # Publish packages
      - name: Build and publish CLI package
        working-directory: typescript/cli
        run: |
          pnpm run build
          pnpm publish --access public --no-git-checks || true
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Publish the same package under the "start-rpc" name
      - name: Publish start-rpc alias package
        working-directory: typescript/cli
        run: |
          # Backup the original package.json
          cp package.json package.json.bak
          # Modify the package.json name from "@erpc-cloud/cli" to "start-rpc"
          sed -i 's/"@erpc-cloud\/cli"/"start-rpc"/' package.json
          # Publish under the new name
          pnpm publish --access public --no-git-checks || true
          # Restore the original package.json
          mv package.json.bak package.json
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Publish the same package under the "start-erpc" name
      - name: Publish start-erpc alias package
        working-directory: typescript/cli
        run: |
          # Backup the original package.json
          cp package.json package.json.bak
          # Modify the package.json name from "@erpc-cloud/cli" to "start-erpc"
          sed -i 's/"@erpc-cloud\/cli"/"start-erpc"/' package.json
          # Publish under the new name
          pnpm publish --access public --no-git-checks || true
          # Restore the original package.json
          mv package.json.bak package.json
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Build and publish Config package
        working-directory: typescript/config
        run: |
          pnpm run build
          pnpm publish --access public --no-git-checks || true
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Native single-arch builds on matching runners; then compose a multi-arch manifest
  docker-build-amd64:
    runs-on: "${{ github.repository_owner == 'erpc' && 'blacksmith-8vcpu-ubuntu-2404' || 'ubuntu-24.04' }}"
    needs: [prepare-release, release]
    if: always() && github.ref == 'refs/heads/main'
    timeout-minutes: 35
    outputs:
      digest_main: ${{ steps.build_main.outputs.digest }}
      digest_release: ${{ steps.build_release.outputs.digest }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Blacksmith Builder
        if: github.repository_owner == 'erpc'
        uses: useblacksmith/setup-docker-builder@v1

      - name: Set up Docker Buildx
        if: github.repository_owner != 'erpc'
        uses: docker/setup-buildx-action@v3

      - name: Compute repo and short SHA
        id: meta
        run: |
          REPO="${{ github.repository }}"
          echo "repo=${REPO@L}" >> "$GITHUB_OUTPUT"
          echo "short_sha=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      - name: Extract version (release commits only)
        id: version
        if: "contains(github.event.head_commit.message, 'chore: release')"
        run: |
          VERSION=$(echo "${{ github.event.head_commit.message }}" | grep -oP 'release \K([0-9]+\.[0-9]+\.[0-9]+)')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Build+push by digest (main)
        id: build_main
        if: github.event.inputs.version_tag == ''
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          build-args: |
            VERSION=main
            COMMIT_SHA=${{ steps.meta.outputs.short_sha }}
          sbom: false # not supported on docker driver, maybe works with blacksmith?
          outputs: type=registry,name=ghcr.io/${{ steps.meta.outputs.repo }},push-by-digest=true

      - name: Build+push by digest (release)
        id: build_release
        if: "contains(github.event.head_commit.message, 'chore: release')"
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          build-args: |
            VERSION=${{ steps.version.outputs.VERSION }}
            COMMIT_SHA=${{ steps.meta.outputs.short_sha }}
          sbom: false # not supported on docker driver, maybe works with blacksmith?
          outputs: type=registry,name=ghcr.io/${{ steps.meta.outputs.repo }},push-by-digest=true

      - name: Attest build provenance (Docker Build)
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        if: steps.build_release.outputs.digest != '' || steps.build_main.outputs.digest != ''
        with:
          subject-name: ghcr.io/${{ steps.meta.outputs.repo }}
          subject-digest: "${{ contains(github.event.head_commit.message, 'chore: release') && steps.build_release.outputs.digest || steps.build_main.outputs.digest }}"
          push-to-registry: true

  docker-build-arm64:
    runs-on: "${{ github.repository_owner == 'erpc' && 'blacksmith-8vcpu-ubuntu-2404-arm' || 'ubuntu-24.04-arm' }}"
    needs: [prepare-release, release]
    if: always() && github.ref == 'refs/heads/main'
    timeout-minutes: 35
    outputs:
      digest_main: ${{ steps.build_main.outputs.digest }}
      digest_release: ${{ steps.build_release.outputs.digest }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Blacksmith Builder
        if: github.repository_owner == 'erpc'
        uses: useblacksmith/setup-docker-builder@v1

      - name: Set up Docker Buildx
        if: github.repository_owner != 'erpc'
        uses: docker/setup-buildx-action@v3

      - name: Compute repo and short SHA
        id: meta
        run: |
          REPO="${{ github.repository }}"
          echo "repo=${REPO@L}" >> "$GITHUB_OUTPUT"
          echo "short_sha=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      - name: Extract version (release commits only)
        id: version
        if: "contains(github.event.head_commit.message, 'chore: release')"
        run: |
          VERSION=$(echo "${{ github.event.head_commit.message }}" | grep -oP 'release \K([0-9]+\.[0-9]+\.[0-9]+)')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Build+push by digest (main)
        id: build_main
        if: github.event.inputs.version_tag == ''
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64
          build-args: |
            VERSION=main
            COMMIT_SHA=${{ steps.meta.outputs.short_sha }}
          sbom: false # not supported on docker driver, maybe works with blacksmith?
          outputs: type=registry,name=ghcr.io/${{ steps.meta.outputs.repo }},push-by-digest=true

      - name: Build+push by digest (release)
        id: build_release
        if: "contains(github.event.head_commit.message, 'chore: release')"
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64
          build-args: |
            VERSION=${{ steps.version.outputs.VERSION }}
            COMMIT_SHA=${{ steps.meta.outputs.short_sha }}
          sbom: false # not supported on docker driver, maybe works with blacksmith?
          outputs: type=registry,name=ghcr.io/${{ steps.meta.outputs.repo }},push-by-digest=true
      
      - name: Attest build provenance (Docker Build)
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        if: steps.build_release.outputs.digest != '' || steps.build_main.outputs.digest != ''
        with:
          subject-name: ghcr.io/${{ steps.meta.outputs.repo }}
          subject-digest: "${{ contains(github.event.head_commit.message, 'chore: release') && steps.build_release.outputs.digest || steps.build_main.outputs.digest }}"
          push-to-registry: true

  docker-manifest:
    runs-on: "${{ github.repository_owner == 'erpc' && 'blacksmith-4vcpu-ubuntu-2404' || 'ubuntu-24.04' }}"
    needs: [docker-build-amd64, docker-build-arm64]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute repo
        id: meta
        run: |
          REPO="${{ github.repository }}"
          echo "repo=${REPO@L}" >> "$GITHUB_OUTPUT"

      - name: Extract version (release commits only)
        id: version
        if: "contains(github.event.head_commit.message, 'chore: release')"
        run: |
          VERSION=$(echo "${{ github.event.head_commit.message }}" | grep -oP 'release \K([0-9]+\.[0-9]+\.[0-9]+)')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Create multi-arch manifest for main
        id: main
        if: github.event.inputs.version_tag == ''
        run: |
          docker buildx imagetools create \
            -t ghcr.io/${{ steps.meta.outputs.repo }}:main \
            ghcr.io/${{ steps.meta.outputs.repo }}@${{ needs.docker-build-amd64.outputs.digest_main }} \
            ghcr.io/${{ steps.meta.outputs.repo }}@${{ needs.docker-build-arm64.outputs.digest_main }}

          docker pull ghcr.io/${{ steps.meta.outputs.repo }}:main
          DIGEST_MAIN=$(docker inspect --format='{{index .RepoDigests 0}}' ghcr.io/${{ steps.meta.outputs.repo }}:main)
          echo "digest_main=${DIGEST_MAIN#*@}" >> "$GITHUB_OUTPUT"

      - name: Create multi-arch manifests for release
        id: release
        if: "contains(github.event.head_commit.message, 'chore: release')"
        run: |
          docker buildx imagetools create \
            -t ghcr.io/${{ steps.meta.outputs.repo }}:${{ steps.version.outputs.VERSION }} \
            ghcr.io/${{ steps.meta.outputs.repo }}@${{ needs.docker-build-amd64.outputs.digest_release }} \
            ghcr.io/${{ steps.meta.outputs.repo }}@${{ needs.docker-build-arm64.outputs.digest_release }}
          
          docker buildx imagetools create \
            -t ghcr.io/${{ steps.meta.outputs.repo }}:latest \
            ghcr.io/${{ steps.meta.outputs.repo }}@${{ needs.docker-build-amd64.outputs.digest_release }} \
            ghcr.io/${{ steps.meta.outputs.repo }}@${{ needs.docker-build-arm64.outputs.digest_release }}
          
          docker pull ghcr.io/${{ steps.meta.outputs.repo }}:${{ steps.version.outputs.VERSION }}
          DIGEST_RELEASE=$(docker inspect --format='{{index .RepoDigests 0}}' ghcr.io/${{ steps.meta.outputs.repo }}:${{ steps.version.outputs.VERSION }})
          docker pull ghcr.io/${{ steps.meta.outputs.repo }}:latest
          DIGEST_LATEST=$(docker inspect --format='{{index .RepoDigests 0}}' ghcr.io/${{ steps.meta.outputs.repo }}:latest)
          echo "digest_release=${DIGEST_RELEASE#*@}" >> "$GITHUB_OUTPUT"
          echo "digest_latest=${DIGEST_LATEST#*@}" >> "$GITHUB_OUTPUT"

      - name: Attest build provenance (Docker Manifest Main)
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        if: github.event.inputs.version_tag == ''
        with:
          subject-name: ghcr.io/${{ steps.meta.outputs.repo }}
          subject-digest: "${{ steps.main.outputs.digest_main }}"
          push-to-registry: true

      - name: Attest build provenance (Docker Manifest Release)
        if: "contains(github.event.head_commit.message, 'chore: release')"
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-name: ghcr.io/${{ steps.meta.outputs.repo }}
          subject-digest: "${{ steps.release.outputs.digest_release }}"
          push-to-registry: true

      - name: Attest build provenance (Docker Manifest Latest)
        if: "contains(github.event.head_commit.message, 'chore: release')"
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-name: ghcr.io/${{ steps.meta.outputs.repo }}
          subject-digest: "${{ steps.release.outputs.digest_latest }}"
          push-to-registry: true
