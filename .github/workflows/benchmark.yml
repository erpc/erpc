name: benchmark

on:
  issue_comment:
    types: [created]
  pull_request_target:
    types: [opened, synchronize, reopened]
    paths:
      - '**.go'
      - 'Makefile'

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  performance:
    runs-on: large
    if: |
      (github.event_name == 'pull_request_target' && contains(github.event.comment.body, '/benchmark')) ||
      (github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, '/benchmark'))

    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'

      # First, for a PR, checkout the base repository's main branch
      - name: Checkout base main
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repo }}
          ref: main
          fetch-depth: 0

      - name: Install benchstat
        run: go install golang.org/x/perf/cmd/benchstat@latest

      - name: Check out PR code (pull_request_target)
        uses: actions/checkout@v3
        with:
          repository: |
            ${{ 
              github.event_name == 'issue_comment' && github.event.issue.pull_request.head.repo.full_name ||
              github.event.pull_request.head.repo.full_name 
            }}
          ref: |
            ${{ 
              github.event_name == 'issue_comment' && github.event.comment.head_ref ||
              github.event.pull_request.head.ref 
            }}
          fetch-depth: 0

      - name: Install benchstat
        run: go install golang.org/x/perf/cmd/benchstat@latest

      - name: Benchmark main branch
        run: |
          # Step 1: Save current HEAD (which might be the PR code or just main code).
          PR_COMMIT=$(git rev-parse HEAD)

          # Step 2: Checkout main and run benchmark on main
          git fetch origin main
          git checkout origin/main
          make bench > /tmp/benchmark-main.txt || touch /tmp/benchmark-main.txt

          # Step 3: Checkout back to PR commit
          git checkout "$PR_COMMIT"
        shell: bash

      - name: Benchmark PR code
        run: |
          make bench > /tmp/benchmark-pr.txt

      - name: Compare benchmarks
        run: |
          benchstat /tmp/benchmark-main.txt /tmp/benchmark-pr.txt > benchmark-result.txt

      - name: Comment PR with results
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const benchmarkResult = fs.readFileSync('benchmark-result.txt', 'utf8');

            // Collect all geomean percentages
            const geomeanMatches = benchmarkResult.matchAll(/geomean\s+[\d\.µn]+\s+[\d\.µn]+\s+([+-]\d+\.\d+)%/g);
            let totalChange = 0;
            let count = 0;
            
            for (const match of geomeanMatches) {
              totalChange += parseFloat(match[1]);
              count++;
            }
            
            const avgChange = count > 0 ? totalChange / count : 0;
            
            let header;
            if (avgChange) {
              if (avgChange < 0) {
                header = `### ✅ Benchmark Results (${Math.abs(avgChange).toFixed(2)}% faster)`;
              } else if (avgChange > 0) {
                header = `### ❌ Benchmark Results (${avgChange.toFixed(2)}% slower)`;
              } else {
                header = `### ℹ️ Benchmark Results (no significant change)`;
              }
            } else {
              header = `### ℹ️ Benchmark Results (no geomean data)`;
            }
            
            const comment = `${header}\n\`\`\`\n${benchmarkResult}\n\`\`\``;

            // Get existing comments to see if we previously posted a benchmark
            const { data: existingComments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existing = existingComments.find(c => c.body && c.body.includes('Benchmark Results'));
            
            if (existing) {
              // Update the old comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body: comment,
              });
            } else {
              // Create a new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment,
              });
            }

