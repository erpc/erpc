name: benchmark
on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - '**.go'
      - 'Makefile'
  push:
    branches:
      - main
permissions:
  pull-requests: write
  contents: read
jobs:
  regression:
    runs-on: large
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
          
      - name: Install benchstat
        run: go install golang.org/x/perf/cmd/benchstat@latest

      - name: Run benchmark on main branch
        run: |
          git checkout main
          make bench > /tmp/benchmark-main.txt || touch /tmp/benchmark-main.txt

      - name: Run benchmark on PR branch
        run: |
          git checkout ${{ github.event.pull_request.head.sha }}
          make bench > /tmp/benchmark-pr.txt

      - name: Compare benchmarks and check degradation
        run: |
          benchstat /tmp/benchmark-main.txt /tmp/benchmark-pr.txt > benchmark-result.txt
          
          # Process with awk to check for >5% degradation
          # Look for lines with △ (indicating change) and extract percentage
          awk '
          function abs(v) {return v < 0 ? -v : v}
          /△/ {
            # Extract the percentage change from the last column
            match($0, /[+-][0-9]+\.[0-9]+%/)
            if (RLENGTH > 0) {
              percentage = substr($0, RSTART, RLENGTH)
              # Remove % and convert to number
              gsub(/%/, "", percentage)
              percentage = percentage + 0
              
              # Check if degradation is more than 5%
              if (percentage > 5) {
                print "FAIL: Performance degradation of " percentage "% detected in: " $0
                exit 1
              }
              if (percentage < 0) {
                print "IMPROVED: Performance improved by " -percentage "%: " $0
              }
            }
          }' benchmark-result.txt || {
            echo "::error::Significant performance degradation detected (>5%)"
            exit 1
          }

      - name: Comment PR with benchmark results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const benchmarkResult = fs.readFileSync('benchmark-result.txt', 'utf8');
            
            // Extract the overall performance change (geomean line)
            const geomeanMatch = benchmarkResult.match(/geomean\s+[\d\.µn]+\s+[\d\.µn]+\s+([+-]\d+\.\d+)%/);
            const changePercent = geomeanMatch ? geomeanMatch[1] : null;
            
            let header;
            if (changePercent) {
              const change = parseFloat(changePercent || '0');
              if (change < 0) {
                header = `### ✅ Benchmark Results (${Math.abs(change).toFixed(2)}% faster)`;
              } else if (change > 0) {
                header = `### ❌ Benchmark Results (${change.toFixed(2)}% slower)`;
              } else {
                header = '### ℹ️ Benchmark Results (No significant change)';
              }
            } else {
              header = '### ℹ️ Benchmark Results';
            }
            
            const comment = `${header}\n\`\`\`\n${benchmarkResult}\n\`\`\``;
            
            // Get all comments
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            // Find existing benchmark comment
            const benchmarkComment = comments.data.find(comment => 
              comment.body.includes('Benchmark Results')
            );
            
            if (benchmarkComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: benchmarkComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
        env:
          PREV_STEP_STATUS: ${{ job.steps.benchmark.outcome }}